
@using Domain.Products.Entities
@using Domain.Products.Repositories

@using Domain.PurchasedProducts.Entities
@using Domain.PurchasedProducts.Repositories

@using Domain.Currencies.Entities
@using Domain.Currencies.Repositories

@using Application.Products
@using Application.PurchasedProducts
@using Application.PurchaseCalculator
@using Application.Currencies

@using System.Globalization
@inject IProductService ProductService
@inject IPurchasedProductService PurchaseProductService
@inject IPurchaseCalculatorService PurchaseCalculatorService
@inject ICurrencyService CurrencyService
@inject ISnackbar Snackbar
@inject NavigationManager nav
@page "/"

<MudText Align="Align.Center" Typo="Typo.h4" GutterBottom="true">Vending Machine</MudText>
 <MudSpacer/> <MudSpacer/>
<MudGrid>
	<MudItem xs="6">
		<MudText Align="Align.Center" Typo="Typo.h5">Available drinks</MudText>
		<MudTable @ref="_tableAvailableDrinks" Items="@_productsList" Hover="true" Breakpoint="Breakpoint.Sm">
			<HeaderContent>
				<MudTh Style="text-align:justify-all">Stock</MudTh>
				<MudTh Style="text-align:justify-all">Name</MudTh>
				<MudTh Style="text-align:justify-all">Price</MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd Style="text-align:justify-all" DataLabel="Stock">@context.Stock</MudTd>
				<MudTd Style="text-align:justify-all" DataLabel="Name">@context.Name</MudTd>
				<MudTd Style="text-align:justify-all" DataLabel="Price">@PriceFormat(context.Price)</MudTd>
			</RowTemplate>
		</MudTable>
	</MudItem>
	<MudItem xs="6">
		<MudText Align="Align.Left" Typo="Typo.h5">Purchase products</MudText> <MudSpacer/> <MudSpacer/>
	    <MudItem xs="2"><MudButton Disabled=true></MudButton></MudItem>
		<MudForm @ref="_formPurchaseProducts">
			 <MudItem xs="8">
				<MudSelect typeof="int" @bind-Value="_productToPurchase.Name" Label="Drink name" Required="true" 
				RequiredError="Choose a product" Variant="Variant.Outlined">
					<MudSelectItem Value="@("Coca Cola")">Coca Cola</MudSelectItem>
					<MudSelectItem Value="@("Pepsi")">Pepsi</MudSelectItem>
					<MudSelectItem Value="@("Fanta")">Fanta</MudSelectItem>
					<MudSelectItem Value="@("Sprite")">Sprite</MudSelectItem>
				</MudSelect>
             </MudItem>
			 <MudItem xs="2"><MudButton Disabled=true></MudButton></MudItem>
			 <MudItem xs="8">
				<MudNumericField @bind-Value="_productToPurchase.Amount" Min="1" Label="Enter the amount of products" 
				Variant="Variant.Outlined"  Required="true" RequiredError="Required field"></MudNumericField>
             </MudItem>
        </MudForm>
		<MudItem xs="2"><MudButton Disabled=true></MudButton></MudItem>
		<MudToolBar DisableGutters="true" Class="gap-4"><MudButton Variant="Variant.Filled" OnClick="AddProductsToPurchase" Color="Color.Secondary">Add to pay</MudButton></MudToolBar>
	</MudItem>
	</MudGrid>
	<br>
	@if(_purchasedProductsList.Length() !=0){
		<MudGrid>
		<MudItem xs="6">
		<MudText Align="Align.Center" Typo="Typo.h5">Purchased Products</MudText>
		<MudTable @ref="_tablePurchasedProducs" Items="@_purchasedProductsList" Hover="true" Breakpoint="Breakpoint.Sm">
			<HeaderContent>
				<MudTh Style="text-align:justify-all">Amount</MudTh>
				<MudTh Style="text-align:justify-all">Name</MudTh>
				<MudTh Style="text-align:justify-all">Unit Price</MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd Style="text-align:justify-all" DataLabel="Amount">@context.Amount</MudTd>
				<MudTd Style="text-align:justify-all" DataLabel="Name">@context.Name</MudTd>
				<MudTd Style="text-align:justify-all" DataLabel="Price">@PriceFormat(context.Price)</MudTd>
			</RowTemplate>
			<FooterContent>
				<MudItem xs="24">
					<MudField Variant="Variant.Text">Total: @_totalPurchaseAmount </MudField>
				</MudItem>
			</FooterContent>
		</MudTable>
	</MudItem>
	<MudItem xs="6">
		<MudText Align="Align.Left" Typo="Typo.h5">Payment</MudText> <MudSpacer/> <MudSpacer/>
	    <MudItem xs="4"><MudButton Disabled=true></MudButton></MudItem>
		<MudGrid>
			<MudItem xs="5">
				<MudForm @ref="_formPayment">
				<MudSelect Dense="true" T="double" Label="Insert cash" Variant="Variant.Outlined" TextChanged="AddPurchaseCoins">
					@foreach (var state in _coinsList) {
						<MudSelectItem T="double" Value="@state.Value">
							@state.Value
						</MudSelectItem>
					}   
				</MudSelect>
				</MudForm>
            </MudItem>
			<MudItem xs="2">
				<MudFab Icon="@Icons.Filled.Add" Color="@Color.Secondary" Class="px-2" Size="Size.Small" OnClick="AddCoinsForPurchase"/>
			</MudItem>
		</MudGrid>
		 <MudItem xs="4"><MudButton Disabled=true></MudButton></MudItem>
		<MudGrid>
			<MudItem xs="3">
				<MudText Variant="Variant.Outlined"> Cash inserted: @_totalUserPayment</MudText>
			</MudItem>
		</MudGrid>
		<MudItem xs="4">
			<MudToolBar DisableGutters="true" Class="gap-4"><MudButton Variant="Variant.Filled" OnClick="PurchasePayment" Color="Color.Secondary">Pay</MudButton></MudToolBar>
		</MudItem>
		 <MudItem xs="4"><MudButton Disabled=true></MudButton></MudItem>
			@if(_totalUserPayment != 0){
				<MudGrid>
					<MudItem xs="3">
						<MudText Variant="Variant.Outlined"> Your exchange is: @_exchangePayment Colones</MudText>
					</MudItem>
				</MudGrid>
			}
	</MudItem>
	</MudGrid>
	}
	

@code {
	private MudTable<Product> _tableAvailableDrinks;
	private MudTable<PurchasedProduct> _tablePurchasedProducs;
	private IEnumerable<Product> _productsList;
	private IEnumerable<PurchasedProduct> _purchasedProductsList = new List<PurchasedProduct>();
	private CultureInfo _cultureCR = CultureInfo.GetCultureInfo("es-CR");
	private MudForm _formPurchaseProducts;
	private MudForm _formPayment;
	private PurchasedProduct _productToPurchase = new PurchasedProduct("",0,0.0,"Canned Soda");
	private Product _product = new Product(0, "", 0.0, "");
	private Currency _bill = new Currency(1, "Colones", "CR", 1000);
	private IList<Currency> _coinsList = new List<Currency>();
	private IList<Currency> _userCoinsList = new List<Currency>();
	private IList<Currency> _exchangeCoinsList = new List<Currency>();
	private IEnumerable<Currency> _userExchangeCoinsList = new List<Currency>();
	private double _totalPurchaseAmount;
	private double _coinValue;
	private double _totalUserPayment;
	private double _exchangePayment;

	protected override async Task OnInitializedAsync()
	{
		_productsList = ProductService.GetAllProducts();
		_coinsList = CurrencyService.GetAllCoins().ToList();
		_coinsList.Add(_bill);
	}

	private async Task AddProductsToPurchase()
	{
		await _formPurchaseProducts.Validate();
		if(_formPurchaseProducts.IsValid){
			ValidateProductToPurchase();
			_purchasedProductsList = PurchaseProductService.GetAllPurchasedProducts();
		}
		_totalPurchaseAmount = PurchaseCalculatorService.GetTotalPurchase(_purchasedProductsList);
	}

	private void ValidateProductToPurchase()
	{
		GetPriceByProductName(_productToPurchase);
		ApproveProductToPurchase();
	}

	private void ApproveProductToPurchase()
	{
		foreach(Product element in _productsList)
		{
			if(element.Name == _productToPurchase.Name)
			{
				if (element.Stock < _productToPurchase.Amount)
				{
					Snackbar.Add("The quantity introduced is greater than the quantity in stock", Severity.Warning);
				}
				else
				{
					AddProduct();
					ProductService.UpdateProductStock(element,_productToPurchase.Amount);
				}
			}
		}
	}

	private void AddProduct()
	{
		int amountProductPurchased = _productToPurchase.Amount;
		string nameProductPurchased =_productToPurchase.Name;
		double priceProductPurchased = _productToPurchase.Price;
		string typeProductPurchased = "Canned Soda";
		PurchasedProduct _purchasedProduct = new PurchasedProduct(nameProductPurchased,amountProductPurchased,priceProductPurchased,typeProductPurchased);
		PurchaseProductService.AddPurchasedProduct(_purchasedProduct);
		Snackbar.Add("Added products to pay", Severity.Success);
	}

	private void GetPriceByProductName(PurchasedProduct purchasedProduct)
	{
		foreach(Product item in _productsList)
		{
			if(item.Name == purchasedProduct.Name)
			{
				_productToPurchase.Price = item.Price;
			}
		}
	}

	private void AddPurchaseCoins(string selected) {
		_coinValue = Double.Parse(selected);

	}

	private async Task AddCoinsForPurchase()
	{
		await _formPayment.Validate();
		if(_formPayment.IsValid){
			int amountCoins = 1;
			string nameCoin="Colones";
			string countryCoin = "CR";
			double valueCoin = _coinValue;
			Currency _coin = new Currency(amountCoins,nameCoin,countryCoin,valueCoin);
			_userCoinsList.Add(_coin);
		}
		_totalUserPayment = PurchaseCalculatorService.GetTotalAmount(_userCoinsList);
	}

	private void PurchasePayment()
	{
		if (_totalUserPayment >= _totalPurchaseAmount)
		{
			ValidateExchange();
		}else
		{
			Snackbar.Add("The money introduced is less than the total purchase amount", Severity.Error);
		}
	}


	private void ValidateExchange()
	{
		double exchangeUserPayment = _totalUserPayment - _totalPurchaseAmount;
		_exchangePayment = exchangeUserPayment;
		if (exchangeUserPayment != 0)
		{
			_exchangeCoinsList = CurrencyService.GetAllCoins().ToList();
			double exchangeAmount = PurchaseCalculatorService.GetTotalAmount(_exchangeCoinsList);
			if (exchangeUserPayment > exchangeAmount)
			{
				Snackbar.Add("Out of order", Severity.Error);
			}else
			{
				_userExchangeCoinsList = PurchaseCalculatorService.GetUserExchange(exchangeUserPayment, _exchangeCoinsList);
				//TODO UPDATE

				Snackbar.Add("Successful Purchase", Severity.Success);
			}
		}
	}

	private string PriceFormat(double price)
	{
		string formatedPrice = string.Format("{0:N}", price);
		formatedPrice = _cultureCR.NumberFormat.CurrencySymbol + formatedPrice;
		return formatedPrice;
    }
}
